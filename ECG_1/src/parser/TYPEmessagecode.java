//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.01.09 at 03:53:07 PM EST 
//


package parser;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TYPEmessagecode.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TYPEmessagecode">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="None"/>
 *     &lt;enumeration value="Acceptable trace"/>
 *     &lt;enumeration value="Check QA message history"/>
 *     &lt;enumeration value="Overrange"/>
 *     &lt;enumeration value="Artifact"/>
 *     &lt;enumeration value="Baseline wander"/>
 *     &lt;enumeration value="Missing lead(s)"/>
 *     &lt;enumeration value="Phone noise"/>
 *     &lt;enumeration value="AC interference"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TYPEmessagecode")
@XmlEnum
public enum TYPEmessagecode {

    @XmlEnumValue("None")
    NONE("None"),
    @XmlEnumValue("Acceptable trace")
    ACCEPTABLE_TRACE("Acceptable trace"),
    @XmlEnumValue("Check QA message history")
    CHECK_QA_MESSAGE_HISTORY("Check QA message history"),
    @XmlEnumValue("Overrange")
    OVERRANGE("Overrange"),
    @XmlEnumValue("Artifact")
    ARTIFACT("Artifact"),
    @XmlEnumValue("Baseline wander")
    BASELINE_WANDER("Baseline wander"),
    @XmlEnumValue("Missing lead(s)")
    MISSING_LEAD_S("Missing lead(s)"),
    @XmlEnumValue("Phone noise")
    PHONE_NOISE("Phone noise"),
    @XmlEnumValue("AC interference")
    AC_INTERFERENCE("AC interference");
    private final String value;

    TYPEmessagecode(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TYPEmessagecode fromValue(String v) {
        for (TYPEmessagecode c: TYPEmessagecode.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
