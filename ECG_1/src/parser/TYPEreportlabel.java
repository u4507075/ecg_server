//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.01.09 at 03:53:07 PM EST 
//


package parser;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TYPEreportlabel.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TYPEreportlabel">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="MIDA"/>
 *     &lt;enumeration value="EASI"/>
 *     &lt;enumeration value="STD-12"/>
 *     &lt;enumeration value="STD-12 MASON-LIKAR"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TYPEreportlabel")
@XmlEnum
public enum TYPEreportlabel {

    @XmlEnumValue("STD 12 LEAD")
    STD12("STD 12 LEAD"),
    @XmlEnumValue("STD 12+ LEAD")
    STD12_PLUS("STD 12+ LEAD"),
    @XmlEnumValue("MASON-LIKAR 12 LEAD")
    MASON_LIKAR_12_STD("MASON-LIKAR 12 LEAD"),
    @XmlEnumValue("MASON-LIKAR 12+ LEAD")
    MASON_LIKAR_12_STD_PLUS("MASON-LIKAR 12+ LEAD"),
    @XmlEnumValue("MOD LEAD PLACEMENT")
    MOD_LEAD_PLACEMENT("MOD LEAD PLACEMENT"),
    @XmlEnumValue("STD PLACEMENT; SOME LEADS DERIVED")
    STD_PLACEMENT_SOME_LEADS_DERIVED("STD PLACEMENT; SOME LEADS DERIVED"),
    @XmlEnumValue("MASON-LIKAR; SOME LEADS DERIVED")
    MASON_LIKAR_SOME_LEADS_DERIVED("MASON-LIKAR; SOME LEADS DERIVED"),
    @XmlEnumValue("MOD LEAD PLACEMENT; SOME LEADS DERIVED")
    MOD_LEAD_PLACEMENT_SOME_LEADS_DERIVED("MOD LEAD PLACEMENT; SOME LEADS DERIVED"),
    @XmlEnumValue("EASI DERIVED LEADS")
    EASI_DERIVED_LEADS("EASI DERIVED LEADS"),
    @XmlEnumValue("EASI (OFF STERNUM) DERIVED LEADS")
    EASI_OFF_STERNUM_DERIVED_LEADS("EASI (OFF STERNUM) DERIVED LEADS"),
    @XmlEnumValue("STD 12 LEAD; REP BEAT")
    STD12_REP_BEAT("STD 12 LEAD; REP BEAT"),
    @XmlEnumValue("STD 12+ LEAD; REP BEAT")
    STD12_PLUS_REP_BEAT("STD 12+ LEAD; REP BEAT"),
    @XmlEnumValue("MASON-LIKAR 12 LEAD; REP BEAT")
    MASON_LIKAR_12_STD_REP_BEAT("MASON-LIKAR 12 LEAD; REP BEAT"),
    @XmlEnumValue("MASON-LIKAR 12+ LEAD; REP BEAT")
    MASON_LIKAR_12_PLUS_STD_REP_BEAT("MASON-LIKAR 12+ LEAD; REP BEAT"),
    @XmlEnumValue("MOD LEAD PLACEMENT; REP BEAT")
    MOD_LEAD_PLACEMENT_REP_BEAT("MOD LEAD PLACEMENT; REP BEAT"),
    @XmlEnumValue("EASI DERIVED LEADS; REP BEAT")
    EASI_DERIVED_LEADS_REP_BEAT("EASI DERIVED LEADS; REP BEAT"),
    @XmlEnumValue("EASI (OFF STERNUM) DERIVED LEADS; REP BEAT")
    EASI_OFF_STERNUM_DERIVED_LEADS_REP_BEAT("EASI (OFF STERNUM) DERIVED LEADS; REP BEAT"),
    MIDA("MIDA"),
    EASI("EASI"),
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    TYPEreportlabel(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TYPEreportlabel fromValue(String v) {
        for (TYPEreportlabel c: TYPEreportlabel.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
