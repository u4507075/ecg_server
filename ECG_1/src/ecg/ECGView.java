/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ecg;


import java.awt.*;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.*;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.transcoder.TranscoderException;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.batik.transcoder.image.JPEGTranscoder;
import org.apache.commons.codec.binary.Base64;
import org.apache.fop.svg.PDFTranscoder;
import org.jdesktop.swingx.JXTreeTable;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import treetable.MyTreeTableModel;

/**
 *
 * @author bon
 */
public class ECGView extends javax.swing.JFrame {
static String HN;
String selectedID;
DrawECG z;
TableRowSorter<TableModel> sorter;
//A4 size = 210 x 297 mm
final int A4WIDTH = 297*4;
final int A4HEIGHT = 210*4;
final int ECGWIDTH = A4WIDTH;//1000;
final int ECGHEIGHT = 640;
final int[] LeadpositionsY = {(ECGHEIGHT/12)+ECGHEIGHT*0/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*1/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*2/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*3/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*4/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*5/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*0/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*1/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*2/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*3/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*4/6,
                                        (ECGHEIGHT/12)+ECGHEIGHT*5/6};
final int[] LeadpositionsX = {230,230,230,230,230,230,230+(ECGWIDTH/2),230+(ECGWIDTH/2),230+(ECGWIDTH/2),230+(ECGWIDTH/2),230+(ECGWIDTH/2),230+(ECGWIDTH/2)};
    /**
     * Creates new form ECG
     */
    public ECGView() {
        initComponents();
        setTitle("ECG Viewer by MED4507");
        jLabel1.setText("HN "+HN);
        jPanel2.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        
        jButton1.setVisible(false);
        jSplitPane2.getLeftComponent().setMinimumSize(new Dimension(0, 0));
        jSplitPane2.getRightComponent().setMinimumSize(new Dimension(0, 0));
        
        //Set full screen panel
        this.setExtendedState(ECGRecorder.MAXIMIZED_BOTH);

        Toolkit toolkit =  Toolkit.getDefaultToolkit ();
        Dimension dim = toolkit.getScreenSize();
        jPanel2.setSize(dim.width-jPanel5.getWidth(),dim.height);

        jPanel4.setVisible(false);
        jPanel4.setOpaque(false);
        
        

            //String filepath = "/home/bon/NetBeansProjects/ECG/ECG_file/2012/03_March/e3945d00-221c-11e1-4823-00034f180029.xml";
            //drawGridfromfile(filepath);
            
        try {
            addECGtable(HN);
            
        } catch (ParseException ex) {
            Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*
        addECGtablebyID();
       */   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(254, 254, 254));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel5.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel5ComponentResized(evt);
            }
        });
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel6.setBackground(new java.awt.Color(253, 25, 22));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setMaximumSize(new java.awt.Dimension(24000, 40));
        jPanel6.setMinimumSize(new java.awt.Dimension(200, 40));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel6.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(1, 1, 1));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setMaximumSize(new java.awt.Dimension(80, 48));
        jLabel1.setMinimumSize(new java.awt.Dimension(80, 48));
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel6.add(jLabel1, "card2");

        jPanel5.add(jPanel6);

        jPanel3.setBackground(java.awt.Color.darkGray);
        jPanel3.setMaximumSize(new java.awt.Dimension(250060, 27));
        jPanel3.setMinimumSize(new java.awt.Dimension(240, 45));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jButton1.setBackground(new java.awt.Color(254, 233, 136));
        jButton1.setForeground(new java.awt.Color(95, 1, 1));
        jButton1.setText("Intepret");
        jButton1.setMaximumSize(new java.awt.Dimension(80, 45));
        jButton1.setMinimumSize(new java.awt.Dimension(80, 45));
        jButton1.setPreferredSize(new java.awt.Dimension(80, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jButton2.setBackground(new java.awt.Color(1, 1, 1));
        jButton2.setForeground(new java.awt.Color(183, 183, 183));
        jButton2.setText("PDF");
        jButton2.setToolTipText("Export a pdf file");
        jButton2.setEnabled(false);
        jButton2.setMaximumSize(new java.awt.Dimension(60, 45));
        jButton2.setMinimumSize(new java.awt.Dimension(60, 45));
        jButton2.setPreferredSize(new java.awt.Dimension(60, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jComboBox1.setBackground(new java.awt.Color(183, 183, 183));
        jComboBox1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(183, 183, 183));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "no", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.setToolTipText("ECG filter");
        jComboBox1.setMaximumSize(new java.awt.Dimension(60, 32767));
        jComboBox1.setMinimumSize(new java.awt.Dimension(60, 27));
        jComboBox1.setPreferredSize(new java.awt.Dimension(60, 30));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jPanel3.add(jComboBox1);

        jPanel5.add(jPanel3);

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel7.add(jTextField1);

        jPanel5.add(jPanel7);

        jPanel1.setBackground(java.awt.Color.lightGray);
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 568));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jPanel5.add(jPanel1);

        jSplitPane2.setLeftComponent(jPanel5);

        jLayeredPane1.setBackground(java.awt.Color.black);

        jPanel4.setBackground(java.awt.Color.white);
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        jPanel4.setBounds(0, 0, 100, 100);
        jLayeredPane1.add(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBackground(java.awt.Color.white);
        jPanel2.setForeground(java.awt.Color.white);
        jPanel2.setPreferredSize(new java.awt.Dimension(801, 568));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );

        jPanel2.setBounds(0, 0, 801, 568);
        jLayeredPane1.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jSplitPane2.setRightComponent(jLayeredPane1);

        getContentPane().add(jSplitPane2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

        //Filter
        if(selectedID!=null)
        {
            try {
                addECGfile(selectedID);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JAXBException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformerConfigurationException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformerException ex) {
                Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        jPanel4.getGraphics().clearRect(0, 0, jPanel4.getWidth(), jPanel4.getHeight());
        jPanel4.getGraphics().drawLine(5, 5, (int)(Math.random()*500), 500);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

            save();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

    }//GEN-LAST:event_formComponentResized

    private void jPanel5ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel5ComponentResized
        Toolkit toolkit =  Toolkit.getDefaultToolkit ();
        Dimension dim = toolkit.getScreenSize();
        jPanel2.setSize(dim.width-jPanel5.getWidth(),dim.height);
    }//GEN-LAST:event_jPanel5ComponentResized

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        RowFilter<TableModel,Object> rf = RowFilter.regexFilter(jTextField1.getText(), 1);
        sorter.setRowFilter(rf);
    }//GEN-LAST:event_jTextField1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                }
                    break;
                }
            }

        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                HN = args[0];
                new ECGView().setVisible(true);
                
            }
        });
    }
    private void addECGtable(String HN) throws ParseException, ParserConfigurationException, MalformedURLException, IOException, SAXException
    {
        
        String[] columnNames = {"ID","ECG List"};
        Object[][] data = getECGinfo(HN);
        /*
        Object[][] data = {
        {"2012-09-06 15:20:35"},
        {"2012-08-06 15:20:35"},
        {"2012-08-06 18:20:35"},
        {"2012-06-15 15:20:35"},
        {"2012-06-06 15:20:35"}};*/
        //JTable table = new JTable(data,columnNames);
        
        final JTable table;
          DefaultTableModel model = new DefaultTableModel(data,columnNames);
          
            table = new JTable(model){
                        @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
            return false; //Disallow the editing of any cell
            }
                        
            @Override
                    public Component prepareRenderer
                    (TableCellRenderer renderer, int index_row, int index_col){
                    Component comp = super.prepareRenderer(renderer, index_row, index_col);

                    //odd col index, selected or not selected
                    if(isCellSelected(index_row, index_col))
                    {
                        comp.setBackground(new Color(205,0,0));
                        comp.setForeground(Color.black);
                    }
                    else
                    {
                        if(index_row % 2 != 0){
                        comp.setBackground(Color.lightGray);
                        comp.setForeground(Color.black);
                        }
                        else{
                        comp.setBackground(Color.white);
                        comp.setForeground(Color.black);
                        }
                    }
                    return comp;
                    }
            };
        
        sorter = new TableRowSorter<>(table.getModel());
        ArrayList sortKeys = new ArrayList();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        table.setRowSorter(sorter);

        
        table.setFillsViewportHeight(true);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(0).setPreferredWidth(0);

        TableColumn col = table.getColumnModel().getColumn(1);
        col.setHeaderRenderer(new MyTableHeaderRenderer());
        table.setCursor(new Cursor(Cursor.HAND_CURSOR));
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                        if(!e.getValueIsAdjusting())
                        {
                            table.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                            String selectedData = null;
                            selectedID = null;
                            int[] selectedRow = table.getSelectedRows();
                            int[] selectedColumns = table.getSelectedColumns();

                            for (int i = 0; i < selectedRow.length; i++) {
                            for (int j = 0; j < selectedColumns.length; j++) {
                                selectedData = (String)table.getValueAt(selectedRow[i],1);// table.getModel().getValueAt(selectedRow[i],1);// selectedColumns[j]+1);
                                selectedID = (String)table.getValueAt(selectedRow[i],0);//(String)table.getModel().getValueAt(selectedRow[i], 0);// selectedColumns[j]);
                            }
                            }
                            System.out.println("Selected: " +selectedID +" "+ selectedData);
                    try {
                        addECGfile(selectedID);
                    } catch (ParserConfigurationException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SAXException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JAXBException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerConfigurationException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    }


                            table.setCursor(new Cursor(Cursor.HAND_CURSOR));
                        }
            }
        });
         
        JScrollPane scrollPane = new JScrollPane(table);
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(table.getTableHeader(), BorderLayout.PAGE_START);
        jPanel1.add(scrollPane, BorderLayout.CENTER);
        
        
    }
    private void addECGtablebyID()
    {
     int num = 14000;  
    String[] columnNames = {"ID"};
    Object[][] data = new Object[num][1];
    for(int i=0;i<num;i++)
    {
        data[i][0] = ""+i;
    }
        final JTable table;
          DefaultTableModel model = new DefaultTableModel(data,columnNames);
          
            table = new JTable(model){
                        @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
            return false; //Disallow the editing of any cell
            }
                        
            @Override
                    public Component prepareRenderer
                    (TableCellRenderer renderer, int index_row, int index_col){
                    Component comp = super.prepareRenderer(renderer, index_row, index_col);

                    //odd col index, selected or not selected
                    if(isCellSelected(index_row, index_col))
                    {
                        comp.setBackground(new Color(205,0,0));
                        comp.setForeground(Color.black);
                    }
                    else
                    {
                        if(index_row % 2 != 0){
                        comp.setBackground(Color.lightGray);
                        comp.setForeground(Color.black);
                        }
                        else{
                        comp.setBackground(Color.white);
                        comp.setForeground(Color.black);
                        }
                    }
                    return comp;
                    }
            };
        /*
        sorter = new TableRowSorter<>(table.getModel());
        ArrayList sortKeys = new ArrayList();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        table.setRowSorter(sorter);
        */
        
        table.setFillsViewportHeight(true);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        /*
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(0).setPreferredWidth(0);
        */
        TableColumn col = table.getColumnModel().getColumn(0);
        col.setHeaderRenderer(new MyTableHeaderRenderer());
        table.setCursor(new Cursor(Cursor.HAND_CURSOR));
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                        if(!e.getValueIsAdjusting())
                        {
                            table.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                            String selectedData = null;
                            selectedID = null;
                            int[] selectedRow = table.getSelectedRows();
                            int[] selectedColumns = table.getSelectedColumns();

                            for (int i = 0; i < selectedRow.length; i++) {
                            for (int j = 0; j < selectedColumns.length; j++) {
                                //selectedData = (String)table.getValueAt(selectedRow[i],0);// table.getModel().getValueAt(selectedRow[i],1);// selectedColumns[j]+1);
                                selectedID = (String)table.getValueAt(selectedRow[i],0);//(String)table.getModel().getValueAt(selectedRow[i], 0);// selectedColumns[j]);
                            }
                            }
                            System.out.println("Selected: " +selectedID);
                    try {
                        addECGfile(selectedID);
                    } catch (ParserConfigurationException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SAXException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JAXBException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerConfigurationException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    }


                            table.setCursor(new Cursor(Cursor.HAND_CURSOR));
                        }

            }
    });

        JScrollPane scrollPane = new JScrollPane(table);
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(table.getTableHeader(), BorderLayout.PAGE_START);
        jPanel1.add(scrollPane, BorderLayout.CENTER);
}
    private String[][] getECGinfo(String HN) throws ParserConfigurationException, MalformedURLException, IOException, SAXException
    {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        //url = http://172.17.8.246/ekg/ekg_get_info.php?hn= +HN
        //url = http://10.0.2.71/ekg/ekg_get_info.php?hn= + HN
        URL url = new URL("http://"+Variable.getHost()+Variable.getECGinfopath()+HN);
        URLConnection con = url.openConnection();
        con.setConnectTimeout(1000);
        Document doc = dBuilder.parse(con.getInputStream());
        doc.getDocumentElement().normalize();
        /*
         <data value="0">
            <id value="16" desc="Primary key">
            *   <hn>2622471</hn>
            *   <txn>123456789</txn>
            *   <typ>opd</typ>
            *   <dtm_record desc="วัน เวลา บันทึกข้อมูลในเครื่อง EKG">2012-03-02 09:17:01</dtm_record>
            *   <dtm_add desc="วัน เวลา ส่งไฟล์ xml ไปเก็บที่ server">2012-11-22 14:21:40</dtm_add>
        * </id>
            * <id value="17" desc="Primary key">
            * <hn>2622471</hn>
            * <txn>123456789</txn>
            * <typ>opd</typ>
            * <dtm_record desc="วัน เวลา บันทึกข้อมูลในเครื่อง EKG">2012-03-02 09:17:01</dtm_record>
            * <dtm_add desc="วัน เวลา ส่งไฟล์ xml ไปเก็บที่ server">2012-12-06 13:05:03</dtm_add>
        * </id>
            * <id value="39" desc="Primary key">
            * <hn>2622471</hn>
            * <txn>123456789</txn>
            * <typ>opd</typ>
            * <dtm_record desc="วัน เวลา บันทึกข้อมูลในเครื่อง EKG">2012-03-02 09:17:01</dtm_record>
            * <dtm_add desc="วัน เวลา ส่งไฟล์ xml ไปเก็บที่ server">2012-12-06 14:36:45</dtm_add>
            * </id>
            * <id value="40" desc="Primary key">
            * <hn>2622471</hn>
            * <txn>123456789</txn>
            * <typ>opd</typ>
            * <dtm_record desc="วัน เวลา บันทึกข้อมูลในเครื่อง EKG">2012-03-02 09:17:01</dtm_record>
            * <dtm_add desc="วัน เวลา ส่งไฟล์ xml ไปเก็บที่ server">2012-12-06 14:37:08</dtm_add>
            </id>
         </data>
         */
        
        NodeList nList = doc.getElementsByTagName("id");
        String[][] data = new String[nList.getLength()][2];
        for(int i=0;i<nList.getLength();i++)
        {
            Node nNode = nList.item(i);
            Element e = (Element)nNode;
            data[i][0]  = e.getAttribute("value");
                Element eElement = (Element) nNode;
                    NodeList list = eElement.getElementsByTagName("dtm_record");
                    Node node = list.item(0);
                    Element date = (Element) node;
                    data[i][1] = date.getTextContent();
        }
        return data;
    }
    private void addECGfile(String id) throws ParserConfigurationException, MalformedURLException, IOException, SAXException, JAXBException, TransformerConfigurationException, TransformerException
    {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        //url = http://172.17.8.246/ekg/get_ekg_file.php?id=40
        //url = http://10.0.2.71/ekg/get_ekg_file.php?id=40
        URL url = new URL("http://"+Variable.getHost()+Variable.getECGfile()+id);
        URLConnection con = url.openConnection();
        con.setConnectTimeout(1000);

        Document doc = dBuilder.parse(con.getInputStream());
        
        doc.getDocumentElement().normalize();
        String sss = DoctoString(doc);
        NodeList list = doc.getElementsByTagName("data");
                    Node node = list.item(0);
                    Element e = (Element) node;
                    String value = e.getAttribute("value");
                    if(value.equals("0"))
                    {
                        String content = e.getTextContent();
                        if(!content.equals(""))
                        {
                        String decodedString = new String(Base64.decodeBase64(content));
                        decodedString = decodedString.replaceAll("�", "");
                        //String xml = decodedString.substring(2,decodedString.length());
                        //Get type here
                        
                        drawGridfromstring(decodedString);
                        }
                        else
                        {
                            jPanel2.removeAll();
                            jPanel2.revalidate();
                            jPanel2.repaint();
                        }
                    }
    }
    public String DoctoString(Document doc) throws TransformerConfigurationException, TransformerException {

        StringWriter sw = new StringWriter();
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer = tf.newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        transformer.transform(new DOMSource(doc), new StreamResult(sw));
        return sw.toString();
}
    /*
    private void addECGList()
    {
        //First get year folder: 2011, 2012,......
        File[] files = getSubdirectory("/home/bon/NetBeansProjects/ECG/ECG_file");
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("ECG", true);
        DefaultMutableTreeNode[] parent = new DefaultMutableTreeNode[files.length];
        for(int i=0;i<files.length;i++)
        {
            parent[i] = new DefaultMutableTreeNode(files[i].getName(), true);
            //Second get month folder
            File[] month = getSubdirectory("/home/bon/NetBeansProjects/ECG/ECG_file/"+files[i].getName());
            Arrays.sort(month);
            //DefaultMutableTreeNode[] mo = new DefaultMutableTreeNode[month.length];
            for(int j=0;j<month.length;j++)
                {
                     DefaultMutableTreeNode mo = new DefaultMutableTreeNode(month[j].getName(),true);
                     String[] ecg = getFilelist("/home/bon/NetBeansProjects/ECG/ECG_file/"+files[i].getName()+"/"+month[j].getName());
                     for(int k=0;k<ecg.length;k++)
                     {
                         DefaultMutableTreeNode ecgname = new DefaultMutableTreeNode(ecg[k]);
                         mo.add(ecgname);
                     }
                     parent[i].add(mo);
                }
            root.add(parent[i]);
        }
       JTree tree = new JTree(root);
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                if(e.getNewLeadSelectionPath().getLastPathComponent().toString()!=null)
                {
                    Object[] path = e.getPath().getPath();
                    if(path.length==4)
                    {
                        filepath = "/home/bon/NetBeansProjects/ECG/ECG_file/"+path[1].toString()+"/"+path[2].toString()+"/"+path[3].toString();
                        drawGrid(filepath);
                    }
                }
            }
        });
        //tree.setBackground(new Color(254,242,218));
        JScrollPane scroll = new JScrollPane(tree);
        jPanel1.add(scroll);

        /*
        DefaultMutableTreeNode parent = new DefaultMutableTreeNode("2012", true);
        String[] files = getFilelist();,
     "Pool", new Integer(10), new Boolean(false)
        
        for(int i=0;i<files.length;i++)
        {
            DefaultMutableTreeNode ecg = new DefaultMutableTreeNode(files[i]);
            parent.add(ecg);
        }
        JTree tree = new JTree(parent);
        final ECGtracing g = new ECGtracing();
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                drawGrid(e.getNewLeadSelectionPath().getLastPathComponent().toString());
            }
        });
        JScrollPane scroll = new JScrollPane(tree);
        jPanel1.add(scroll);
    }
    private File[] getSubdirectory(String path)
    {
        File dir = new File(path);
        File[] subdir = dir.listFiles(new FileFilter() {  
            @Override
            public boolean accept(File pathname) {  
                return pathname.isDirectory();  
            }  
        });  
        return subdir;
    }
    private String[] getFilelist(String path)
    {
        //File dir = new File("/home/bon/NetBeansProjects/ECG/ECG_file");
        File dir = new File(path);
        // It is also possible to filter the list of returned files.
        // This example does not return any files that start with `.'.
        FilenameFilter filter = new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".xml");//!name.startsWith(".");
            }
        };
        String[] children = dir.list(filter);
        return children;
    }
    * */
    
    public void drawGridfromfile(String filepath) throws JAXBException, IOException, ParserConfigurationException, SAXException
    {
       jPanel2.removeAll();
       int smooth;
       if(jComboBox1.getSelectedItem().toString().equals("no"))
       {
           smooth = 1;
       }
       else
       {
           smooth = Integer.parseInt(jComboBox1.getSelectedItem().toString())+1;
       }

                try {          
                        ecg.Type t = new ecg.Type();
                        String type = t.getTypefromfile(filepath);
                        z = new DrawECG(type);
                        z.drawECGfromfile(filepath,smooth,jPanel2,jPanel4);
                    } catch (JAXBException | IOException ex) {
                        Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                if(z!=null)
                {
                jPanel2.add(z.c);
                jPanel2.revalidate();
                jPanel2.repaint();
                jButton2.setEnabled(true);
                }
                else
                {
                    jButton2.setEnabled(false);
                }
    }
    
    private void drawGridfromstring(String string) throws JAXBException, IOException, ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException
    {
       jPanel2.removeAll();
       int smooth;
       if(jComboBox1.getSelectedItem().toString().equals("no"))
       {
           smooth = 1;
       }
       else
       {
           smooth = Integer.parseInt(jComboBox1.getSelectedItem().toString())+1;
       }
                try {    
                    ecg.Type t = new ecg.Type();
                    String type = t.getTypefromstring(string);
                    z = new DrawECG(type);
                    z.drawECGfromstring(string,smooth,jPanel2,jPanel4);
                } catch (JAXBException | IOException ex) {
                    Logger.getLogger(ECGView.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(z!=null)
                {
                jPanel2.add(z.c);
                jPanel2.revalidate();
                jPanel2.repaint();
                jButton2.setEnabled(true);
                }
                else
                {
                    jButton2.setEnabled(false);
                }
    }
    public final void addECGDetails()
    {
        MyTreeTableModel treeTableModel = new MyTreeTableModel();
        JXTreeTable treeTable = new JXTreeTable( treeTableModel );
        JScrollPane pane = new JScrollPane(treeTable);
        Container con = new Container();
        con.setLayout(new BorderLayout());
        con.setVisible(true);
        con.add(pane, BorderLayout.CENTER);
    }

    String path = "";
    private void save()
    {
        JFileChooser c = new JFileChooser();
        c.setCurrentDirectory(new File(path));
        javax.swing.filechooser.FileFilter pdf = new PDFFileFilter();
        c.addChoosableFileFilter(pdf);
        c.addChoosableFileFilter(new SVGFileFilter());
        c.setFileFilter(pdf);
         int option = c.showSaveDialog(this);
        if(option == JFileChooser.APPROVE_OPTION){ 
            try {
                path = c.getSelectedFile().getPath();
                jPanel2.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                saveFile(c.getSelectedFile().getPath(), c.getFileFilter().getDescription());
                jPanel2.setCursor(new Cursor(Cursor.MOVE_CURSOR));
            } catch (IOException | JAXBException | TranscoderException ex) {
                jPanel2.setCursor(new Cursor(Cursor.MOVE_CURSOR));
                JOptionPane.showMessageDialog(rootPane, "Cannot create file!");
            }
        }
        
    }

public class SVGFileFilter extends javax.swing.filechooser.FileFilter
{
        @Override
     public boolean accept(File f)
    {
        if (f.isDirectory()) {
            return true;
                }

                String extension = getExtension(f);
                if (extension != null) {
                    if (extension.equals("svg")) {
                            return true;
                    } else {
                        return false;
                    }
                }
                
                return false;
    }
     public String getExtension(File f) {
                String ext = null;
                String s = f.getName();
                int i = s.lastIndexOf('.');

                if (i > 0 &&  i < s.length() - 1) {
                    ext = s.substring(i+1).toLowerCase();
                }
                return ext;
            }
        @Override
    public String getDescription()
    {
        return ".svg";
    }
}
public class PDFFileFilter extends javax.swing.filechooser.FileFilter
{
        @Override
     public boolean accept(File f)
    {
        if (f.isDirectory()) {
            return true;
                }

                String extension = getExtension(f);
                if (extension != null) {
                    if (extension.equals("pdf")) {
                            return true;
                    } else {
                        return false;
                    }
                }
                
                return false;
    }
     public String getExtension(File f) {
                String ext = null;
                String s = f.getName();
                int i = s.lastIndexOf('.');

                if (i > 0 &&  i < s.length() - 1) {
                    ext = s.substring(i+1).toLowerCase();
                }
                return ext;
            }
        @Override
    public String getDescription()
    {
        return ".pdf";
    }
}
private void saveFile(String path, String type) throws IOException, JAXBException, TranscoderException
    {
        //Writer out;

        // Get a DOMImplementation.
        DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
        // Create an instance of org.w3c.dom.Document.
        String svgNS = "";
        Document document = domImpl.createDocument(svgNS, "svg", null);
        
        File svgFile;
        if(type.equals(".svg"))
        {
            svgFile = new File(path);
        }
        else
        {
            svgFile = File.createTempFile("ECG", ".svg");
        }
        
         // Ask the test to render into the SVG Graphics2D implementation.

            SVGGraphics2D g = new SVGGraphics2D(document);
            z.drawECG(g);

            try (OutputStream outputStream = new FileOutputStream(svgFile); Writer out = new OutputStreamWriter(outputStream, "UTF-8")) {
                g.stream(out, true);///true = use css
                outputStream.flush();
            }
        

        if(type.equals(".pdf"))
        {
        PDFTranscoder t = new PDFTranscoder();
        
        // Set the transcoding hints.
        t.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(1.0));
        t.addTranscodingHint(JPEGTranscoder.KEY_WIDTH,new Float(this.A4WIDTH));
        t.addTranscodingHint(JPEGTranscoder.KEY_HEIGHT,new Float(this.A4HEIGHT));

        // Create the transcoder input.
        TranscoderInput input = new TranscoderInput(svgFile.toURI().toURL().toString());
            try (OutputStream ostream = new FileOutputStream(path)) {
                TranscoderOutput output = new TranscoderOutput(ostream);
                // Save the image.
                t.transcode(input, output);
                // Flush and close the stream.
                ostream.flush();
            }
        }
    }

class MyTableHeaderRenderer extends JLabel implements TableCellRenderer {
        @Override
  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
      boolean hasFocus, int rowIndex, int vColIndex) {
    setForeground(Color.lightGray);
    setBackground(Color.darkGray);
    setOpaque(true);
    setBorder(javax.swing.BorderFactory.createRaisedSoftBevelBorder());
    setText("ECG List");
   // setToolTipText("DDD");//((String) value);
    return this;
  }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
