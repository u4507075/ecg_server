/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ecg;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.commons.codec.binary.Base64;
import org.pushingpixels.trident.Timeline;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import patientinfo.Readpatientinfo;
import print.PrintTranscoder;
import watch.Watchdirectory;

/**
 *
 * @author bon
 */
public class ECGRecorder extends javax.swing.JFrame {
    
    static String ID;
    DrawECG z = null;
    int A4WIDTH = 297*4;
    int A4HEIGHT = 210*4;
    //DrawECGPhillips z;
    Color green = new Color(192,255,62,255);
    Color yellow = new Color(255,255,92,255);
    Color red = new Color(255,122,122,255);
    String filepath = "";
    /**
     * Creates new form ECG
     */
    public ECGRecorder(String id) {
        initComponents();

        setTitle("ECG Recorder by MED4507");
        jPanel2.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        
        Toolkit toolkit =  Toolkit.getDefaultToolkit ();
        Dimension dim = toolkit.getScreenSize();
        jPanel2.setSize(dim);
        jPanel3.setSize(dim.width,100);
        jLabel3.setBackground(new Color(0,0,0,0));
        jLabel3.setForeground(new Color(0,0,0,0));
        jLabel3.setVisible(false);
        jPanel8.setVisible(false);
        jPanel8.setOpaque(false);
        //Set full screen panel
        this.setExtendedState(ECGRecorder.MAXIMIZED_BOTH);
        
        //Delete all old ECG files
        deleteFile(false);
        
        //Start looking a path that an ecg machine will save an ecg xml file
        lookingECG(Variable.getFilepath());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel11 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(254, 254, 254));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel11.setMaximumSize(new java.awt.Dimension(32767, 60));
        jPanel11.setMinimumSize(new java.awt.Dimension(0, 60));
        jPanel11.setPreferredSize(new java.awt.Dimension(1273, 60));
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(java.awt.Color.lightGray);
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMaximumSize(new java.awt.Dimension(220, 2147483647));
        jPanel1.setMinimumSize(new java.awt.Dimension(220, 75));
        jPanel1.setPreferredSize(new java.awt.Dimension(220, 75));
        jPanel1.setLayout(new java.awt.CardLayout(5, 5));

        jLabel1.setFont(new java.awt.Font("TH Sarabun New", 1, 48)); // NOI18N
        jLabel1.setForeground(java.awt.Color.black);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setBorder(null);
        jLabel1.setMaximumSize(new java.awt.Dimension(200, 65));
        jLabel1.setMinimumSize(new java.awt.Dimension(200, 65));
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 65));
        jPanel1.add(jLabel1, "card2");

        jPanel11.add(jPanel1);

        jPanel7.setBackground(java.awt.Color.gray);
        jPanel7.setMaximumSize(new java.awt.Dimension(2000000, 2147483647));
        jPanel7.setMinimumSize(new java.awt.Dimension(0, 75));
        jPanel7.setPreferredSize(new java.awt.Dimension(200, 75));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 0));

        jLabel2.setFont(new java.awt.Font("TH Sarabun New", 1, 48)); // NOI18N
        jLabel2.setForeground(java.awt.Color.darkGray);
        jPanel7.add(jLabel2);

        jPanel11.add(jPanel7);

        jPanel6.setBackground(java.awt.Color.gray);
        jPanel6.setMaximumSize(new java.awt.Dimension(2000000, 2147483647));
        jPanel6.setMinimumSize(new java.awt.Dimension(0, 75));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 75));
        jPanel6.setLayout(new java.awt.CardLayout(5, 10));

        jComboBox1.setBackground(java.awt.Color.white);
        jComboBox1.setFont(new java.awt.Font("TH Sarabun New", 1, 24)); // NOI18N
        jPanel6.add(jComboBox1, "card2");

        jPanel11.add(jPanel6);

        jPanel5.setBackground(java.awt.Color.gray);
        jPanel5.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        jPanel5.setMinimumSize(new java.awt.Dimension(100, 40));
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel5.setLayout(new java.awt.CardLayout(5, 5));

        jButton2.setBackground(java.awt.Color.darkGray);
        jButton2.setFont(new java.awt.Font("TH Sarabun New", 1, 24)); // NOI18N
        jButton2.setForeground(java.awt.Color.lightGray);
        jButton2.setText("CLEAR");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setMaximumSize(new java.awt.Dimension(50, 30));
        jButton2.setMinimumSize(new java.awt.Dimension(50, 30));
        jButton2.setPreferredSize(new java.awt.Dimension(50, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton2, "card2");

        jPanel11.add(jPanel5);

        jPanel9.setBackground(java.awt.Color.gray);
        jPanel9.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        jPanel9.setMinimumSize(new java.awt.Dimension(100, 40));
        jPanel9.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel9.setLayout(new java.awt.CardLayout(5, 5));

        jButton3.setBackground(java.awt.Color.darkGray);
        jButton3.setFont(new java.awt.Font("TH Sarabun New", 1, 24)); // NOI18N
        jButton3.setForeground(java.awt.Color.lightGray);
        jButton3.setText("PRINT");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setMaximumSize(new java.awt.Dimension(50, 30));
        jButton3.setMinimumSize(new java.awt.Dimension(50, 30));
        jButton3.setPreferredSize(new java.awt.Dimension(50, 30));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton3, "card2");

        jPanel11.add(jPanel9);

        jPanel4.setBackground(java.awt.Color.gray);
        jPanel4.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        jPanel4.setMinimumSize(new java.awt.Dimension(100, 40));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel4.setLayout(new java.awt.CardLayout(5, 5));

        jButton1.setBackground(java.awt.Color.darkGray);
        jButton1.setFont(new java.awt.Font("TH Sarabun New", 1, 24)); // NOI18N
        jButton1.setForeground(java.awt.Color.lightGray);
        jButton1.setText("SAVE");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setMaximumSize(new java.awt.Dimension(50, 30));
        jButton1.setMinimumSize(new java.awt.Dimension(50, 30));
        jButton1.setPreferredSize(new java.awt.Dimension(50, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1, "card2");

        jPanel11.add(jPanel4);

        getContentPane().add(jPanel11);

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel8.setOpaque(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        jPanel8.setBounds(0, 0, 100, 100);
        jLayeredPane1.add(jPanel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel3.setBackground(new java.awt.Color(27, 233, 24));
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setFont(new java.awt.Font("TH Sarabun New", 1, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setOpaque(true);
        jPanel3.add(jLabel3);

        jPanel3.setBounds(0, 0, 0, 0);
        jLayeredPane1.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));
        jPanel2.setForeground(new java.awt.Color(254, 254, 254));
        jPanel2.setPreferredSize(new java.awt.Dimension(801, 568));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );

        jPanel2.setBounds(0, 0, 870, 568);
        jLayeredPane1.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(jLayeredPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        showMessage(jLabel3, "The data is being recorded. Please DO NOT terminate the program before this process is done!.", red);
        
        sendMessage send = new sendMessage();
        send.start();
        /*
            try {
                sendXML();
            } catch (ParserConfigurationException | SAXException | IOException ex) {
                Message(jLabel3, "Failed to send the ECG file.", yellow);
            }
            */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int option = JOptionPane.showConfirmDialog(rootPane, "All ECG files will be deleted permanantly. Would you like to continue this process?");
        if(option==JOptionPane.YES_OPTION)
        {
            deleteFile(false);
            Message(jLabel3, "ALL ECGs are removed.", yellow);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(z!=null)
        {
        try 
        {                              
            jButton3.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            // Get a DOMImplementation.
            DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
            // Create an instance of org.w3c.dom.Document.
            String svgNS = "";
            Document document = domImpl.createDocument(svgNS, "svg", null);
            
            File svgFile = File.createTempFile("ECG", ".svg");
            
             // Ask the test to render into the SVG Graphics2D implementation.

                SVGGraphics2D g = new SVGGraphics2D(document);
                z.drawECG(g);

                try (OutputStream outputStream = new FileOutputStream(svgFile); Writer out = new OutputStreamWriter(outputStream, "UTF-8")) {
                    g.stream(out, true);///true = use css
                    outputStream.flush();
                }
            PrintTranscoder p = new PrintTranscoder();
            try 
            {
                p.print(svgFile);
            } catch (Exception ex) {
                Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
            }
            } catch (    JAXBException | IOException ex) {
            Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            jButton3.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
        }
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    /*
                     //--- Create a new PrinterJob object
                PrinterJob printJob = PrinterJob.getPrinterJob();

                //--- Create a new book to add pages to
                Book book = new Book();

                //--- Add the cover page using the default page format for this print
                // job
                
                PrintUtilities p = new PrintUtilities();
                            p.printComponent(z);
                            
                //book.append(p, printJob.defaultPage());

                //--- Add the document page using a landscape page format
                PageFormat documentPageFormat = new PageFormat();
                documentPageFormat.setOrientation(PageFormat.LANDSCAPE);
                book.append(p, documentPageFormat);

                //--- Add a third page using the same painter
                //book.append(new PrintUtilities(), documentPageFormat);

                //--- Tell the printJob to use the book as the pageable object
                printJob.setPageable(book);

                //--- Show the print dialog box. If the user click the
                //--- print button we then proceed to print else we cancel
                //--- the process.
                if (printJob.printDialog()) {
                  try {
                    printJob.print();
                  } catch (Exception PrintException) {
                    PrintException.printStackTrace();
                  }
                }
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    /*
                        if(z!=null)
                        {
                            PrintUtilities p = new PrintUtilities();
                            p.printComponent(z);
                            p.print();
                        }
                     /*         
                    InputStream is = null;
                    try {
                        


                        
                        
                        File file = new File(filepath);
                        is = new BufferedInputStream(new FileInputStream(file));
                        //Discover the default print service. If you call PrintServiceLookup.lookupPrintServices
                        //then it will return an array of print services available and you can choose a
                        //printer from them
                        PrintService service = PrintServiceLookup.lookupDefaultPrintService();
                        //Doc flavor specifies the output format of the file (Mime type + Char encoding)
                        //You can retrieve doc flavors supported by the printer, like this
                        //DocFlavor [] supportedFlavors = service.getSupportedDocFlavors();
                        DocFlavor flavor = DocFlavor.INPUT_STREAM.TEXT_PLAIN_US_ASCII;
                        
                        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                        aset.add(MediaSizeName.ISO_A4);
                        aset.add(new Copies(1));
                        aset.add(OrientationRequested.LANDSCAPE);
                        // Create the print job
                        DocPrintJob job = service.createPrintJob();
                        //Create the Doc. You can pass set of attributes(type of PrintRequestAttributeSet) as the
                        //3rd parameter specifying the page setup, orientation, no. of copies, etc instead of null.
                        PrintUtilities p = new PrintUtilities();
                        Doc doc = new SimpleDoc(p, flavor, null);
                        
                        //Order to print, (can pass attributes instead of null)
                        try {  
                         job.print(doc, null);  
                        } catch (PrintException e) {  
                        }
                        //DocPrintJob.print() is not guaranteed to be synchronous. So it's better to wait on completion
                        //of the print job before closing the stream. (See the link below)
                        is.close();
                        System.out.println("Printing done....");
                    } catch (IOException ex) {
                        Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                    }  
                    finally {
                        try {
                            is.close();
                        } catch (IOException ex) {
                            Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }*/
            
            
        
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                /*
                 //--- Create a new PrinterJob object
            PrinterJob printJob = PrinterJob.getPrinterJob();

            //--- Create a new book to add pages to
            Book book = new Book();

            //--- Add the cover page using the default page format for this print
            // job
            
            PrintUtilities p = new PrintUtilities();
                        p.printComponent(z);
                        
            //book.append(p, printJob.defaultPage());

            //--- Add the document page using a landscape page format
            PageFormat documentPageFormat = new PageFormat();
            documentPageFormat.setOrientation(PageFormat.LANDSCAPE);
            book.append(p, documentPageFormat);

            //--- Add a third page using the same painter
            //book.append(new PrintUtilities(), documentPageFormat);

            //--- Tell the printJob to use the book as the pageable object
            printJob.setPageable(book);

            //--- Show the print dialog box. If the user click the
            //--- print button we then proceed to print else we cancel
            //--- the process.
            if (printJob.printDialog()) {
              try {
                printJob.print();
              } catch (Exception PrintException) {
                PrintException.printStackTrace();
              }
            }
                
                
                
                
                
                
                
                
                
                
                
                /*
                    if(z!=null)
                    {
                        PrintUtilities p = new PrintUtilities();
                        p.printComponent(z);
                        p.print();
                    }
                 /*         
                InputStream is = null;
                try {
                    


                    
                    
                    File file = new File(filepath);
                    is = new BufferedInputStream(new FileInputStream(file));
                    //Discover the default print service. If you call PrintServiceLookup.lookupPrintServices
                    //then it will return an array of print services available and you can choose a
                    //printer from them
                    PrintService service = PrintServiceLookup.lookupDefaultPrintService();
                    //Doc flavor specifies the output format of the file (Mime type + Char encoding)
                    //You can retrieve doc flavors supported by the printer, like this
                    //DocFlavor [] supportedFlavors = service.getSupportedDocFlavors();
                    DocFlavor flavor = DocFlavor.INPUT_STREAM.TEXT_PLAIN_US_ASCII;
                    
                    PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
                    aset.add(MediaSizeName.ISO_A4);
                    aset.add(new Copies(1));
                    aset.add(OrientationRequested.LANDSCAPE);
                    // Create the print job
                    DocPrintJob job = service.createPrintJob();
                    //Create the Doc. You can pass set of attributes(type of PrintRequestAttributeSet) as the
                    //3rd parameter specifying the page setup, orientation, no. of copies, etc instead of null.
                    PrintUtilities p = new PrintUtilities();
                    Doc doc = new SimpleDoc(p, flavor, null);
                    
                    //Order to print, (can pass attributes instead of null)
                    try {  
                     job.print(doc, null);  
                    } catch (PrintException e) {  
                    }
                    //DocPrintJob.print() is not guaranteed to be synchronous. So it's better to wait on completion
                    //of the print job before closing the stream. (See the link below)
                    is.close();
                    System.out.println("Printing done....");
                } catch (IOException ex) {
                    Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                }  
                finally {
                    try {
                        is.close();
                    } catch (IOException ex) {
                        Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }*/
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                }
                    break;
                }
            }

        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ECGRecorder(args[0]).setVisible(true);
                ID = args[0];
            }
        });
    }
    private void lookingECG(String path)
    {
        Watchdirectory di = new Watchdirectory(this, path, false);
        di.start();
    }

    public void drawECG(String filepath) throws JAXBException, IOException, ParserConfigurationException, SAXException
    {
        jPanel2.removeAll();
        jComboBox1.removeAllItems();
        try {
            ecg.Type t = new ecg.Type();
            String type = t.getTypefromfile(filepath);
            z = new DrawECG(type);
            z.drawECGfromfile(filepath,1,jPanel2,jPanel8);
        } catch (JAXBException | IOException ex) {
            Message(jLabel3, "Cannot draw ECG.", yellow);
        }
            this.filepath = filepath;

       jLabel1.setText("HN "+z.getHN());
       jLabel2.setText(z.getName());
       if(Readpatientinfo.getWard()!=null)
       {
       for(int i=0;i<Readpatientinfo.getWard().size();i++)
       {
           jComboBox1.addItem(Readpatientinfo.getWard().get(i));
       }
       }
       jPanel2.add(z.c);
       jPanel2.revalidate();
       jPanel2.repaint();
    }

public class sendMessage extends Thread{
        @Override
    public void run()
    {
            try {
                sendXML();
                //Message(jLabel3, "Data were saved completely.",green);
            } catch (ParserConfigurationException | SAXException | IOException ex) {
                Message(jLabel3, "Failed to send the ECG file.", yellow);
                Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void sendXML() throws ParserConfigurationException, SAXException, IOException
    {
        //filepath = "/home/bon/Documents/Project/ECG project/ECG XML/0d8b6000-6c0e-11e1-4823-0002ab040029.xml";
        if(jComboBox1.getItemCount()>=1)
        {
            if(!filepath.equals(""))
            {
            File file = new File(filepath);
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (file);

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            
            /*
            //Insert TXN
            NodeList nList = doc.getElementsByTagName("patient");
            Node nNode = nList.item(0);
            Element eElement = (Element) nNode;
                nList = eElement.getElementsByTagName("generalpatientdata");
                nNode = nList.item(0);
                eElement = (Element) nNode;

                    if(Readpatientinfo.getTXN()!=null)
                    {
                    nList = eElement.getElementsByTagName("uniquepatientid");
                    nNode = nList.item(0);
                    eElement = (Element) nNode;
                    eElement.setTextContent(Readpatientinfo.getTXN().get(jComboBox1.getSelectedIndex()).toString());
                    }
            
            //Insert recorder ID
            nList = doc.getElementsByTagName("orderinfo");
            nNode = nList.item(0);
            eElement = (Element) nNode;
                nList = eElement.getElementsByTagName("ordernumber");
                nNode = nList.item(0);
                eElement = (Element) nNode;
                eElement.setTextContent(ID);
                
            //Insert department: ipd or opd
            nList = doc.getElementsByTagName("dataacquisition");
            nNode = nList.item(0);
            eElement = (Element) nNode;
                nList = eElement.getElementsByTagName("acquirer");
                nNode = nList.item(0);
                eElement = (Element) nNode;
                    nList = eElement.getElementsByTagName("departmentid");
                    nNode = nList.item(0);
                    eElement = (Element) nNode;
                    eElement.setTextContent(Readpatientinfo.getDepartment());
            /*
            //Save xml file
            XMLSerializer serializer = new XMLSerializer();
            serializer.setOutputCharStream(
            new java.io.FileWriter("/home/bon/Downloads/sampleecgoutput.xml"));
            serializer.serialize(doc);
            */
                  
            try {
            send(DoctoString(doc),doc);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else
        {
            Message(jLabel3, "File path is not correct.", yellow);
        }
        }
        else
        {
            Message(jLabel3, "This patient does not walk in today.", yellow);
        }
    }
 public void send(String xml, Document doc) throws UnknownHostException, IOException, ParserConfigurationException, SAXException
    {
        /*
            POST http://10.0.2.71/report&program/program/vs_api/vs_data_add.php HTTP/1.1
            Host: http://10.0.2.71
            Content-Type: text/xml; charset=utf-8
            Content-length: 722
            SOAPAction: 

            XML content
         */	
      //Create socket
      //String hostname = "http://"+Variable.getHostIP()+Variable.getSavedirectory();//"http://sddn.med.cmu.ac.th/report&program/program/vs_api/vs_data_add.php";
      //String host = "http://"+Variable.getHostIP();//"http://sddn.med.cmu.ac.th";

      String HN = ECGvalue.getHN();
      if(!HN.equals(""))
      {
      int port = Integer.parseInt(Variable.getSMIport());
      Socket sock = new Socket(Variable.getHost(), port);
      
      //String x = readFile("/home/bon/Downloads/a.txt");
      SimpleDateFormat dtf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      String open = "";
      open = open +"<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\r\n";
      open = open +"<ecg>" + "\r\n";
      open = open +"<hn>"+HN+"</hn>" + "\r\n";
      open = open +"<txn>"+Readpatientinfo.getTXN().get(jComboBox1.getSelectedIndex()).toString()+"</txn>" + "\r\n";
      open = open +"<typ>"+Readpatientinfo.getDepartment()+"</typ>" + "\r\n";
      open = open +"<dtm_record>"+ECGvalue.getRecorddatetime()+"</dtm_record>" + "\r\n";
      open = open +"<dtm_add>"+dtf.format(new Date())+"</dtm_add>" + "\r\n";
      open = open +"<sender_id>"+ID+"</sender_id>" + "\r\n";
      open = open +"<version>"+doc.getXmlVersion()+"</version>" + "\r\n";
      open = open +"<encoding>"+doc.getXmlEncoding()+"</encoding>" + "\r\n";
      open = open +"<content>" + "\r\n";        
      
      String encode = new String(Base64.encodeBase64(xml.getBytes()));
      
      String close = "";
      close = close +"</content>" + "\r\n";
      close = close +"</ecg>";
      //File file = new File("/home/bon/Downloads/ecgtest.xml");
      //FileWriter fileWriter = new FileWriter(file);
      //BufferedWriter wr = new BufferedWriter(fileWriter);
      BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream(),"UTF-8"));
            wr.write("POST http://"+Variable.getHost()+Variable.getSavedirectory() + " HTTP/1.1\r\n");
            wr.write("Host: http://"+Variable.getHost()+"\r\n");
            wr.write("Content-Length: " + (open.length()+encode.length()+close.length()) + "\r\n");
            //wr.write("Content-Length: " + x.length() + "\r\n");
            wr.write("Content-Type: text/xml; charset=\""+"UTF-8"+"\"\r\n");
            wr.write("SOAPAction:\r\n");
            wr.write("\r\n");
            
            
            //System.out.println(x);
            //wr.write(x);

           

            
            //Send data
            wr.write(open);
            wr.write(encode);
            wr.write(close);
            int l = open.length()+encode.length()+close.length();
            /*
            wr.write("<ecg>");
                wr.write("<hn>"+HN+"</hn>");
                wr.write("<txn>"+Readpatientinfo.getTXN().get(jComboBox1.getSelectedIndex()).toString()+"</txn>");
                wr.write("<typ>"+Readpatientinfo.getDepartment()+"</typ>");
                wr.write("<dtm_record>"+ECGvalue.getRecorddatetime()+"</dtm_record>");
                wr.write("<dtm_add>"+dtf.format(new Date())+"</dtm_add>");
                //wr.write("<filename>"+filename+"</filename>");
                wr.write("<sender_id>"+ID+"</sender_id>");
                wr.write("<version>"+doc.getXmlVersion()+"</version>");
                wr.write("<encoding>"+doc.getXmlEncoding()+"</encoding>");
                wr.write("<content>");
                    wr.write(xml);
                wr.write("</content>");
            wr.write("</ecg>");
            */
            wr.flush();
            
     
          BufferedReader rd = new BufferedReader(new InputStreamReader(sock.getInputStream()));
          String line;
          while((line = rd.readLine()) != null)
            {
                System.out.println(line);
                if(line.startsWith("<?xml"))
                {
                    getSoapResponse(line);
                }
            }
    }
    }
    }

private String readFile(String path) throws IOException {
  FileInputStream stream = new FileInputStream(new File(path));
  try {
    FileChannel fc = stream.getChannel();
    MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());
    /* Instead of using default, pass in a decoder. */
    return Charset.defaultCharset().decode(bb).toString();
  }
  finally {
    stream.close();
  }
}
public String DoctoString(Document doc) throws TransformerConfigurationException, TransformerException {

        StringWriter sw = new StringWriter();
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer = tf.newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        transformer.transform(new DOMSource(doc), new StreamResult(sw));
        return sw.toString();
}
private void getSoapResponse(String line) throws ParserConfigurationException, SAXException, IOException{

    /*
     HTTP/1.1 200 OK
    Date: Fri, 09 Nov 2012 08:10:57 GMT
    Server: Apache/2.2.3 (Unix) mod_ssl/2.2.3 OpenSSL/0.9.8e-fips-rhel5 PHP/5.3.14 mod_mono/2.10
    X-Powered-By: PHP/5.3.14
    Content-Length: 214
    Content-Type: text/html

    <?xml version="1.0" encoding="utf-8"?>
    <data value="1" desc="documentname มีอยู่แล้วในฐานข้อมูล">
    <documentname>f3a3f680-539d-11e1-4823-000f5f910029.xml</documentname></data>

     */

      // Response
      //line = line.trim().replaceFirst("^([\\W]+)<","<");
      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
      InputSource is = new InputSource(new StringReader(line));
      Document doc = dBuilder.parse(is);
      //Document doc = dBuilder.parse(sock.getInputStream());
      doc.getDocumentElement().normalize();
        
      NodeList nList = doc.getElementsByTagName("data");
      Element e = (Element)nList.item(0);
      //data sent successfully = 0; else = 1
      int complete = Integer.parseInt(e.getAttribute("value"));
      //if successfully = 0 ==> description = "complete"
      //else
      //description = "ไม่ได้ส่งข้อมูลแนบมาด้วย.
      //description = "documentname มีอยู่แล้วในฐานข้อมูล"
      //description = "Error copy file"
      String description = e.getAttribute("desc");
      /*
      nList = doc.getElementsByTagName("documentname");
      e = (Element)nList.item(0);
      String filename = e.getTextContent();
      */
      if(complete==0)
      {
          deleteFile(true);
          filepath="";
      }
      else
      {
          Message(jLabel3, "Error: "+description, yellow);
      }
}

public void showMessage(JLabel label, String text, Color bgcolor)
        {
 
            label.setVisible(true);
            label.setText(text);
            
            label.setBackground(bgcolor);
            label.setForeground(Color.black);
            //new hideMessage(label).start();
/*
            Timeline timeline = new Timeline(label);
            timeline.addPropertyToInterpolate("background", new Color(255,255,255,0), bgcolor);
            timeline.addPropertyToInterpolate("foreground", new Color(255,255,255,0), new Color(0,0,0,255));
            timeline.setDuration(1000);
            timeline.play();
            */
        }


public void Message(JLabel label, String text, Color bgcolor)
{
    label.setVisible(true);
    label.setText(text);
    
    label.setBackground(bgcolor);
    label.setForeground(Color.black);
    new hideMessage(label).start();
    /*
    Timeline timeline = new Timeline(label);
    timeline.addPropertyToInterpolate("background", new Color(255,255,255,200), bgcolor);
    timeline.addPropertyToInterpolate("foreground", new Color(255,255,255,0), new Color(0,0,0,255));
    timeline.setDuration(1000);
    timeline.play();

    Fadeout fo = new Fadeout();
    fo.getFadein(timeline);
    fo.getLabel(label);
    fo.start();*/
}
public class hideMessage extends Thread{
    JLabel label;
    public hideMessage(JLabel label)
    {
        this.label = label;
    }
        @Override
    public void run()
    {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally
            {
                label.setVisible(false);
            }
    }
}
public class Fadeout extends Thread{
    
        Timeline timeline;
        JLabel label;
    public void getFadein(Timeline timeline)
    {
        this.timeline = timeline;
    }
    public void getLabel(JLabel label)
    {
        this.label = label;
    }
    @Override
    public void run()
    {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
            }
       
        while(true)
        {
            if(timeline.isDone())
            {
                timeline.playReverse();
                break;
            }
        }
        
        try {
                Thread.sleep(1200);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ECGRecorder.class.getName()).log(Level.SEVERE, null, ex);
                }
               label.setVisible(false);
    }
}
public final void deleteFile(boolean save)
{
    File file = new File(Variable.getFilepath());
    String[] files = file.list();
    if(file.isDirectory())
    {
        for(int i=0;i<files.length;i++)
        {
            File f = new File(file,files[i]);
            f.delete();
        }
        jPanel2.removeAll();
        jPanel2.revalidate();
        jPanel2.repaint();
        clearInfo();
        if(save)
        {
            Message(jLabel3, "ECG file was successfully saved.", green);
        }
    }
}
private void clearInfo()
{
    jLabel1.setText("");
    jLabel2.setText("");
    jComboBox1.removeAllItems();
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration//GEN-END:variables
}
